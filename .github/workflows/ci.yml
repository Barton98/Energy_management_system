name: EMS Testing Pipeline

# Simple CI
# Runs tests automatically when code changes are pushed

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Run Python tests
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Get code from repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install required packages
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Start API server for tests
      run: |
        # Start API server in background for tests
        python api.py &
        API_PID=$!
        echo $API_PID > api.pid

        # Wait for server to be ready
        echo "Waiting for API server to start..."
        for i in {1..30}; do
          if curl -s http://localhost:8000/docs > /dev/null 2>&1; then
            echo "API server is ready!"
            break
          fi
          echo "Attempt $i/30 - waiting..."
          sleep 2
        done
            
    - name: Run automated tests
      run: |
        # Run tests against the running API server
        pytest test_ems_extended.py -v
        pytest test_qa_advanced.py -v
        
    - name: Stop API server
      if: always() #Always run cleanup, even if tests fail
      run: |
        if [ -f api.pid ]; then
          kill $(cat api.pid) || echo "API server already stopped"
          rm -f api.pid
        fi

  # Job 2: Test Docker setup (basic)
  docker-test:
    runs-on: ubuntu-latest
    needs: test  # Only run if tests pass
    
    steps:
    - name: Get code from repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Verify Docker setup
      run: |
        docker --version
        docker compose version
    
    - name: Test Docker build
      run: |
        docker build -t ems-demo .
        
    - name: Test minimal docker-compose
      run: |
        # Start Docker containers (using modern 'docker compose' syntax)
        docker compose -f docker-compose.minimal.yml up -d

        # Wait for API to be ready
        echo "Waiting for Docker API to start..."
        for i in {1..60}; do
          if curl -s http://localhost:8000/docs > /dev/null 2>&1; then
            echo "Docker API is ready!"
            break
          fi
          echo "Attempt $i/60 - waiting..."
          sleep 2
        done
        
        # Test if API is accessible
        curl -f http://localhost:8000/docs || exit 1
        
    - name: Cleanup Docker
      if: always()
      run: |
        docker compose -f docker-compose.minimal.yml down || echo "Cleanup completed"

# This pipeline demonstrates:
# - Automated testing on code changes
# - Basic Docker functionality validation  
# - Quality gates (Docker only runs if tests pass)
# - CI/CD understanding
